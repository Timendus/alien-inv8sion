:macro s8plane N {
	:byte { 0xF0 + N }
	:byte 0x01
}

:const NUM_ENEMIES 30
:const ENEMY_SIZE 5
:calc ENEMY_BYTES { NUM_ENEMIES * ENEMY_SIZE }


: main
  lores
  render-vanity
  v0 := 100
  delay := v0
  loop
    v0 := delay
    if v0 != 0 then
  again
: restart
  render-title
  v0 := key

: main-redraw
  # Sync to clock
  v0 := 1
  delay := v0
  loop
    v0 := delay
    if v0 != 0 then
  again

  clock-tick

  # Game over check
  i := long game-over
  load v0
  if v0 == 5 then jump reset
  if v0 == 0 begin
    # Skip these things if we're game over
    check-keys
    check-shots
    check-collisions
  end

  render-scene
  explode-enemies
  jump main-redraw

: clock-tick
  i := long tick
  load v0 - v0 # Don't auto-increment i
  v0 += 1
  save v0

  # Game over animation
  i := long game-over
  load v1 - v1
  if v0 == 0 begin
    if v1 == 4 then v1 := 5
  end
  v2 := 0b00011111
  v2 &= v0
  if v2 == 0 begin
    if v1 == 3 then v1 := 4
  end
  v2 := 0b00001111
  v2 &= v0
  if v2 == 0 begin
    if v1 == 2 then v1 := 3
    if v1 == 1 then v1 := 2
  end
  save v1 - v1

  # Hide level overlay after a while
  v2 := 0b01111111
  v2 &= v0
  if v2 == 0 begin
    i := long level-screen
    save v0
  end

  # Revive all enemies once in a while
  v2 := 0b00111111
  v2 &= v0
  if v2 == 0 then revive-enemies

  # Regain power over time
  v2 := 0b00000001
  v2 &= v0
  if v2 == 0 begin
    i := long hits
    load v0 - v0
    if v0 != 0 then v0 -= 1
    save v0
  end
  return

: check-shots
  # Are we shooting?
  i := long shooting
  load v0
  if v0 == 0 then return

  # Shooting costs power
  i := long hits
  load v0 - v0
  if v0 == 120 begin
    i := long shooting
    v0 := 0
    save v0
    return # Can't shoot without power
  else
    v0 += 1
    save v0
  end

  # Check if we shot any aliens
  i := long player
  load vC - vD
  vE := 0
  loop
    i := long enemies
    i += vE
    load v0 - v3
    # Don't blow up dead aliens
    if v0 == 0 then jump check-shots-next-alien
    if v0 > 2 then jump check-shots-next-alien
    # Check if we hit this alien
    v2 >>= v2
    v2 >>= v2
    if v2 > vC begin # Enemy is in front of player
      v3 >>= v3
      v3 >>= v3
      v3 -= vD
      v3 += 2
      if v3 < 8 begin # Enemy is on same height as player
        # Hit! Set enemy to explosion
        v0 := 3
        save v0
        # Increast score
        i := long score
        load v0 - v0
        v0 += 1
        save v0
        # Next level if score overflows
        if v0 == 0 begin
          i := long level
          load v0 - v0
          v0 += 1
          save v0
          v0 := 1
          i := long level-screen
          save v0
          i := long tick
          save v0
          hide-enemies
        end
        # Make a beep
        v0 := 1
        buzzer := v0
      end
    end
    : check-shots-next-alien
    vE += 5
    if vE == ENEMY_BYTES then return # Checked all NUM_ENEMIES enemies?
  again

: check-collisions
  i := long player
  load vC - vD
  vE := 0
  loop
    i := long enemies
    i += vE
    load v0 - v3
    # Don't collide with dead or exploded aliens
    if v0 == 0 then jump check-collisions-next-alien
    if v0 > 2 then jump check-collisions-next-alien
    # Compare alien position (v2, v3) with player position (vC, vD)
    v2 >>= v2
    v2 >>= v2
    v2 -= vC
    v2 += 7
    if v2 < 15 begin
      v3 >>= v3
      v3 >>= v3
      v3 -= vD
      v3 += 3
      if v3 < 10 begin
        # Hit! Set enemy to explosion
        v0 := 3
        save v0
        # You get no points for this, but lose poser
        i := long hits
        load v0 - v0
        if v0 > 114 begin
          i := long game-over
          v0 := 1
          save v0
          i := long tick
          save v0
          v0 := 0
          i := long shooting
          save v0
        else
          v0 += 10
          save v0
        end
      end
    end
    : check-collisions-next-alien
    vE += 5
    if vE == ENEMY_BYTES then return # Checked all NUM_ENEMIES enemies?
  again

: reset
  i := long reset-values
  load v9
  i := long player
  save v9

  # Reset enemies
  i := long reset-enemies
  load v4
  vE := 0
  i := long enemies
  loop
    save v4
    vE += 1
    if vE != NUM_ENEMIES then # Checked all NUM_ENEMIES enemies?
  again

  jump restart


# Show the contents of the display buffer on the screen
: display-copy-values
  0 1 8 16 24 32 40 48 56 15
: display-copy
  i := display-copy-values
  load v9
  i := display-buffer

  s8plane 0xF
  clear

  s8plane 1
  sprite v0 v1 15   i += v9
  sprite v0 v3 15   i += v9
  sprite v2 v1 15   i += v9
  sprite v2 v3 15   i += v9
  sprite v3 v1 15   i += v9
  sprite v3 v3 15   i += v9
  sprite v4 v1 15   i += v9
  sprite v4 v3 15   i += v9
  sprite v5 v1 15   i += v9
  sprite v5 v3 15   i += v9
  sprite v6 v1 15   i += v9
  sprite v6 v3 15   i += v9
  sprite v7 v1 15   i += v9
  sprite v7 v3 15   i += v9
  sprite v8 v1 15   i += v9
  sprite v8 v3 15   i += v9

  s8plane 2
  sprite v0 v1 15   i += v9
  sprite v0 v3 15   i += v9
  sprite v2 v1 15   i += v9
  sprite v2 v3 15   i += v9
  sprite v3 v1 15   i += v9
  sprite v3 v3 15   i += v9
  sprite v4 v1 15   i += v9
  sprite v4 v3 15   i += v9
  sprite v5 v1 15   i += v9
  sprite v5 v3 15   i += v9
  sprite v6 v1 15   i += v9
  sprite v6 v3 15   i += v9
  sprite v7 v1 15   i += v9
  sprite v7 v3 15   i += v9
  sprite v8 v1 15   i += v9
  sprite v8 v3 15   i += v9

    s8plane 4
  sprite v0 v1 15   i += v9
  sprite v0 v3 15   i += v9
  sprite v2 v1 15   i += v9
  sprite v2 v3 15   i += v9
  sprite v3 v1 15   i += v9
  sprite v3 v3 15   i += v9
  sprite v4 v1 15   i += v9
  sprite v4 v3 15   i += v9
  sprite v5 v1 15   i += v9
  sprite v5 v3 15   i += v9
  sprite v6 v1 15   i += v9
  sprite v6 v3 15   i += v9
  sprite v7 v1 15   i += v9
  sprite v7 v3 15   i += v9
  sprite v8 v1 15   i += v9
  sprite v8 v3 15   i += v9

    s8plane 8
  sprite v0 v1 15   i += v9
  sprite v0 v3 15   i += v9
  sprite v2 v1 15   i += v9
  sprite v2 v3 15   i += v9
  sprite v3 v1 15   i += v9
  sprite v3 v3 15   i += v9
  sprite v4 v1 15   i += v9
  sprite v4 v3 15   i += v9
  sprite v5 v1 15   i += v9
  sprite v5 v3 15   i += v9
  sprite v6 v1 15   i += v9
  sprite v6 v3 15   i += v9
  sprite v7 v1 15   i += v9
  sprite v7 v3 15   i += v9
  sprite v8 v1 15   i += v9
  sprite v8 v3 15   i += v9

  return

# Display buffer contains 8 * 15 * 2 bytes = 240 bytes per layer
# 240 / 15 = 16. So either load 16 values 15 times or the other way around
: display-clear-values
  0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0
: display-clear
  i := display-clear-values
  load vF
  i := display-buffer

  # Plane 1
  save vF  save vF  save vF  save vF
  save vF  save vF  save vF  save vF
  save vF  save vF  save vF  save vF
  save vF  save vF  save vF

  # Plane 2
  save vF  save vF  save vF  save vF
  save vF  save vF  save vF  save vF
  save vF  save vF  save vF  save vF
  save vF  save vF  save vF

  # Plane 3
  save vF  save vF  save vF  save vF
  save vF  save vF  save vF  save vF
  save vF  save vF  save vF  save vF
  save vF  save vF  save vF

  # Plane 4
  save vF  save vF  save vF  save vF
  save vF  save vF  save vF  save vF
  save vF  save vF  save vF  save vF
  save vF  save vF  save vF
  return

# v0, v1 = complex sprite address
# v2 = X coordinate
# v3 = Y coordinate
# Preserves v2 - v3
# Destroys v0, v1, v4 - vA and i
: display-complex-sprite
  :alias layer vA

  layer := 0
  i := display-complex-sprite-address
  save v1

  loop
    # Get i to point to the complex sprite
    0xF0 0x00 # i := long ....
  : display-complex-sprite-address
    0x00 0x00
    load v1
    v4 := v1

    # Done all layers? Then return
    if layer == v0 then return

    # Get pointer to the right sprite data
    i += layer
    i += layer
    i += layer

    # Get plane
    load v0
    v5 := v0

    load v1
    display-sprite

    layer += 1
  again

# Render a sprite to the display buffer
# v0, v1 = sprite address
# v2 = X coordinate
# v3 = Y coordinate
# v4 = height (in pixels)
# v5 = target plane (0-3, 4-7 for mask)
# Preserves v2 - v5
# Destroys v0, v1, v6 - v9 and i

# Overhead: 5 instructions
# Per row: ~38 instructions
# Per shift: 7 instructions
# So for 8x8 sprite at bad alignment: 5 + 8 * (38 + 7*7) = 701 instructions
# For 8x8 sprite at good alignment: 5 + 8 * (38 + 2) = 325 instructions
: display-sprite
  :alias X v2
  :alias Y v3
  :alias height v4
  :alias targetplane v5
  :alias row v6
  :alias leftPart v7
  :alias rightPart v8
  :alias offset v1
  :alias temp1 v9

  row := 0
  i := display-sprite-address
  save v1

  # Normalize coordinates
  v0 := 31
  v3 &= v0
  v0 := 63
  v2 &= v0

  loop
    if row == height then return # Done
    v0 := Y
    v0 += row
    if v0 == 30 then return # Overflowing bottom of screen, so done

    # Get the sprite data to put on the display buffer
    0xF0 0x00 # i := long ....
  : display-sprite-address
    0x00 0x00
    i += row
    load v0

    offset := 0b00000111
    offset &= X
    rightPart := 0
    leftPart := v0

    # Do some shifting magic for unaligned sprites
    loop
      while offset != 0
      rightPart >>= rightPart
      leftPart >>= leftPart
      if vF != 0 then rightPart += 128
      offset -= 1
    again

    # Calculate place in buffer
    offset := X
    offset >>= offset
    offset >>= offset
    offset >>= offset
    i := long display-buffer
    # Get right plane
    temp1 := targetplane
    v0 := 3
    temp1 &= v0
    v0 := 240
    loop
      while temp1 > 0
      i += v0
      temp1 -= 1
    again
    # Get right column
    v0 := 30 # rows
    loop
      while offset != 0
      i += v0
      offset -= 1
    again
    # Get right row
    i += Y
    i += row

    # Write the new data to the buffer
    load v0 - v0 # Don't auto-increment i
    if targetplane > 3 begin
      temp1 := 0xFF
      leftPart ^= temp1
      v0 &= leftPart
    else
      v0 |= leftPart
    end
    save v0 - v0
    if X < 56 begin
      vF := 30
      i += vF
      load v0 - v0
      if targetplane > 3 begin
        temp1 := 0xFF
        rightPart ^= temp1
        v0 &= rightPart
      else
        v0 |= rightPart
      end
      save v0 - v0
    end

    row += 1
  again


: render-score
  i := long score
  load v0
  i := long numbers-bcd
  bcd v0
  load v2
  vA := v1
  vB := v2
  v2 := 4
  v3 := 0
  render-number
  v3 += 5
  v0 := vA
  render-number
  v3 += 5
  v0 := vB
  jump render-number

: render-level
  i := long level
  load v0
  i := long numbers-bcd
  bcd v0
  load v2
  vA := v1
  vB := v2
  v2 := 4
  v3 := 16
  render-number
  v3 += 5
  v0 := vA
  render-number
  v3 += 5
  v0 := vB
  jump render-number

# v0 = number
# v2 = X
# v3 = Y
: render-number
  i := long numbers
  i += v0
  i += v0
  load v1
  v4 := 4 # height
  v5 := 0 # plane
  jump display-sprite




: render-scene
  display-clear
  render-background
  render-enemies
  render-player
  render-hud
  render-power
  render-score
  render-level
  i := long level-screen
  load v0
  if v0 == 1 then render-level-text
  i := long game-over
  load v0
  if v0 == 4 then render-game-over-text
  display-copy
  return

: render-background
  i := long tick
  load vE - vE

  vD := vE
  vD >>= vD
  vD >>= vD
  vD >>= vD
  v0 := 7
  v0 &= vD
  v2 := 7
  v2 -= v0 # X
  v3 := 8 # Y
  loop
    :unpack long background2-sprite
    display-complex-sprite
    v2 += 8
    if v2 < 64 then
  again

  vD := vE
  vD >>= vD
  vD >>= vD
  v0 := 7
  v0 &= vD
  v2 := 7
  v2 -= v0 # X
  v3 := 12 # Y
  loop
    :unpack long background3-sprite
    display-complex-sprite
    v2 += 8
    if v2 < 64 then
  again

  vD := vE
  vD >>= vD
  v0 := 7
  v0 &= vD
  v2 := 7
  v2 -= v0 # X
  v3 := 17 # Y
  loop
    :unpack long background4-sprite
    display-complex-sprite
    v2 += 8
    if v2 < 64 then
  again

  v0 := 7
  v0 &= vE
  v2 := 7
  v2 -= v0 # X
  v3 := 22 # Y
  loop
    :unpack long background5-sprite
    display-complex-sprite
    v2 += 8
    if v2 < 64 then
  again

  vE >>= vE
  vE >>= vE
  vE >>= vE
  vE >>= vE
  v0 := 7
  v0 &= vE
  v2 := 7
  v2 -= v0 # X
  v3 := 0 # Y
  loop
    :unpack long background1-sprite
    display-complex-sprite
    v2 += 8
    if v2 < 64 then
  again

  return

: render-player
  :unpack long player-sprite
  i := long game-over
  load v2 - v2
  if v2 == 1 begin
    :unpack long explosion1-sprite
  end
  if v2 == 2 begin
    :unpack long explosion2-sprite
  end
  if v2 == 3 begin
    :unpack long explosion3-sprite
  end
  if v2 == 4 begin
    :unpack long explosion3-sprite
  end
  i := player
  load v2 - v3 # X and Y
  display-complex-sprite

  i := long game-over
  load v0
  if v0 != 0 then return

  # Show shield?
  i := hits
  load v0
  if v0 < 115 begin
    v3 -= 1
    if v0 > 100 begin
      :unpack long low-shield-sprite
    else
      :unpack long shield-sprite
    end
    display-complex-sprite
    v3 += 1
  end

  # Are we shooting?
  i := shooting
  load v0
  if v0 == 0 then return

  # Show lasers
  v2 += 3 # X
  i := tick
  load v0
  v1 := 3
  v0 &= v1
  v2 += v0
  v3 += 1 # Y
  loop
    :unpack long laser-sprite
    display-complex-sprite
    v3 += 4
    :unpack long laser-sprite
    display-complex-sprite
    v3 -= 4
    v2 += 6
    if v2 < 60 then
  again
  return

# This subroutine is also responsible for updating the enemy positions and for
# bouncing them at the edges of the screen.
: render-enemies
  # Pre-load current level for generate-enemy
  i := long level
  load vC - vC
  vE := 0
  loop
    if vE == ENEMY_BYTES then return # Checked all NUM_ENEMIES enemies

    i := long enemies
    i += vE
    load v0 - v4 # Don't auto-increment i

    if v0 != 0 begin # Is there an enemy in this slot?
      v2 += v1
      v3 += v4
      save v0 - v4 # Don't auto-increment i

      # Interpret X and Y coordinates as fixed point floats
      v2 >>= v2 v2 >>= v2
      v3 >>= v3 v3 >>= v3

      if v2 == 0 begin
        # Disappear on the left (and generate new enemy)
        generate-enemy
        i := long score
        load v0 - v0
        if v0 > 9 begin
          v0 -= 10
        else
          v0 := 0
        end
        save v0
      else
        # Bounce top and bottom
        if v3 == 0  then v4 := 1
        if v3 == 25 then v4 := -1
        v5 := 4
        i += v5
        save v4 - v4

        # Select the right sprite
        if v0 == 1 begin :unpack long enemy1-sprite end
        if v0 == 2 begin :unpack long enemy2-sprite end
        if v0 == 3 begin :unpack long explosion1-sprite end
        if v0 == 4 begin :unpack long explosion2-sprite end
        if v0 == 5 begin :unpack long explosion3-sprite end

        # And show that cannon fodder!
        display-complex-sprite
      end
    end
    vE += 5
  again

: render-hud
  # Plane 1
  i := long hud-top-sprite
  load vE
  i := long display-buffer-plane1
  save vE
  i := long hud-bottom-sprite
  load vE
  i := long display-buffer-plane1-plus-15
  save vE

  # Plane 2
  i := long hud-top-sprite
  load vE
  i := long display-buffer-plane2
  save vE
  i := long hud-bottom-sprite
  load vE
  i := long display-buffer-plane2-plus-15
  save vE

  # Plane 2
  i := long hud-top-sprite
  load vE
  i := long display-buffer-plane3
  save vE
  i := long hud-bottom-sprite
  load vE
  i := long display-buffer-plane3-plus-15
  save vE

  # Plane 2
  i := long hud-top-sprite
  load vE
  i := long display-buffer-plane4
  save vE
  i := long hud-bottom-sprite
  load vE
  i := long display-buffer-plane4-plus-15
  save vE

  return

: render-power
  i := long hits
  load vA - vA
  vA >>= vA
  vA >>= vA
  v2 := 0
  v3 := 0
  v4 := 1
  loop
    :unpack long power-bar
    if v3 >= vA begin
      v5 := 0
    else
      v5 := 2
    end
    display-sprite
    v3 += 1
    if v3 != 30 then
  again
  return







: player
  10 10 # X, Y
: shooting
  0 # Boolean
: level-screen
  1 # Boolean

: tick
  0
: wave
  0
: level
  1
: score
  0
: hits
  0
: game-over
  0

:monitor player 2
:monitor shooting 1
:monitor tick 1
:monitor wave 1
:monitor level 1

#####################
# Non-blocking key input check
# Updates the player data on key input
# Destroys v0 - v3
: check-keys
  i := long player
  load v0 - v2

  v3 := OCTO_KEY_A
  if v3 key begin
    if v0 > 9 then v0 -= 1
  end

  v3 := OCTO_KEY_D
  if v3 key begin
    if v0 < 55 then v0 += 1
  end

  v3 := OCTO_KEY_W
  if v3 key begin
    if v1 > 1 then v1 -= 1
  end

  v3 := OCTO_KEY_S
  if v3 key begin
    if v1 < 22 then v1 += 1
  end

  v3 := OCTO_KEY_E
  if v3 key then v2 := 1
  if v3 -key then v2 := 0

  save v0 - v2
  return

# Input: v0 = level number
: render-level-text
  create-empty-space
  render-level-number
  render-ready-string
  render-level-string
  return

: render-game-over-text
  create-empty-space
  render-game-over-string
  return

: create-empty-space
  i := long display-buffer-plane1
  clear-row
  i := long display-buffer-plane2
  clear-row
  i := long display-buffer-plane3
  clear-row
  i := long display-buffer-plane4
  clear-row
  return

: clear-row
  v0 := 0
  v1 := 0
  v2 := 0
  v3 := 0
  v4 := 0
  v5 := 0
  v6 := 0

  v7 := 0
  v8 := 24
  v9 := 9 # Top of black bar
  vA := 6
  i += v9
  loop
    save v0 - v6
    i += vA
    save v0 - v6
    i += v8
    v7 += 1
    if v7 != 8 then
  again
  return

: render-level-number
  i := long level
  load v4 - v4
  i := numbers-bcd
  bcd v4
  load vA - vC
  v4 := vB
  v4 += 17
  load-font
  v2 := 40
  v3 := 10 # Top of line one
  v4 := 5 # Height
  v5 := 2 # Plane
  display-sprite
  v4 := vC
  v4 += 17
  load-font
  v2 := 44
  v3 := 10 # Top of line one
  v4 := 5 # Height
  v5 := 2 # Plane
  display-sprite
  return

: render-level-string
  vB := 0
  v2 := 19
  v3 := 10 # Top of line one
  loop
    if vB == 5 then return
    i := long level-string
    i += vB
    load v4 - v4
    load-font
    load vA - vA
    v4 := 5 # Height
    v5 := 2 # Plane
    display-sprite
    v2 += vA
    vB += 1
  again

: render-ready-string
  vB := 0
  v2 := 11
  v3 := 16 # Top of line two
  loop
    if vB == 10 then return
    i := long get-ready-string
    i += vB
    load v4 - v4
    load-font
    load vA - vA
    v4 := 5 # Height
    v5 := 2 # Plane
    display-sprite
    v2 += vA
    vB += 1
  again

: render-game-over-string
  vB := 0
  v2 := 2
  v3 := 13 # Top of line two
  loop
    if vB == 15 then return
    i := long game-over-string
    i += vB
    load v4 - v4
    load-font
    load vA - vA
    v4 := 5 # Height
    v5 := 2 # Plane
    display-sprite
    v2 += vA
    vB += 1
  again

# Get font address in both i and v0, v1
# Input: v4 = ascii value
: load-font
  i := long font
  :unpack long font
  v4 <<= v4
  v1 += v4
  v0 += vF
  v1 += v4
  v0 += vF
  v1 += v4
  v0 += vF
  v1 += 1
  v0 += vF
  i += v4
  i += v4
  i += v4
  return



: render-vanity
  i := long vanity
  s8plane 0x7
  v2 := 24
  jump render-bitmap

: render-title
  i := long title-screen
  s8plane 0xF
  v2 := 32
: render-bitmap
  clear
  v0 := 0
  v1 := 0
  loop
    sprite v0 v1 8
    i += v2
    v0 += 8
    if v0 == 64 begin
      v0 := 0
      v1 += 8
      if v1 == 32 then return
    end
  again





: reset-values
  10 10 # Player X, Y
  0 # Shooting boolean
  1 # Level screen boolean
  0 # tick
  0 # wave
  1 # level
  0 # score
  0 # hits
  0 # Game-over state
: reset-enemies
  0 0 0 0 0

# Make exploding enemies go boom
: explode-enemies
  # Pre-load current level for generate-enemy
  i := long level
  load vC - vC
  vE := 0
  loop
    i := long enemies
    i += vE
    load v0 - v0
    if v0 == 5 begin
      generate-enemy
    end
    if v0 == 4 begin
      v0 := 5
      save v0
    end
    if v0 == 3 begin
      v0 := 4
      save v0
    end
    vE += 5
    if vE == ENEMY_BYTES then return # Checked all NUM_ENEMIES enemies?
  again

# Revive enemies that have been disabled
: revive-enemies
  # Don't revive enemies while on "Get ready" or "Game over" screen
  i := long level-screen
  load v0
  if v0 == 1 then return
  i := long game-over
  load v0
  if v0 == 3 then return
  # Pre-load current level for generate-enemy
  i := long level
  load vC - vC
  vE := 0
  loop
    i := long enemies
    i += vE
    load v0 - v0
    if v0 == 0 then generate-enemy
    vE += 5
    if vE == ENEMY_BYTES then return # Checked all NUM_ENEMIES enemies?
  again

: hide-enemies
  vE := 0
  loop
    i := long enemies
    i += vE
    v0 := 0
    save v0
    vE += 5
    if vE == ENEMY_BYTES then return # Checked all NUM_ENEMIES enemies?
  again

# Generate a new wave of enemies
: generate-enemies
  # Pre-load current level for generate-enemy
  i := long level
  load vC - vC
  vE := 0
  i := long enemies
  loop
    generate-enemy
    vE += 1
    if vE == NUM_ENEMIES then return # Generated all NUM_ENEMIES enemies?
  again

: generate-enemy
  # v0 / Type: 0, 1 or 2 (0 most likely)
  v0 := random 3
  if v0 == 3 then v0 := 0
  # v1 / Vx: Negative number from -1 to -3
  v2 := random 7
  v2 >>= v2
  if vF == 1 begin # 50% chance of -1
    v1 := -1
  else
    v1 := 3
    v2 &= v1
    if v2 == 3 begin
      v1 := -3 # 12.5% chance of -3
    else
      v1 := -2 # 37.5% chance of -2
    end
  end
  # Add the current level as a speed boost (level must be in vC)
  v1 -= vC
  # v2 / X coordinate: always start on the right, fixed point 6.2 bits number
  v2 := 0xFF
  # v3 / Y coordinate: random between 0 and 15, fixed point 6.2 bits number
  v3 := random 0x0F
  v3 += 5
  v3 <<= v3
  v3 <<= v3
  # v4 / Vy: Number from -1 to 1 (0 most likely)
  v4 := 1
  vF := random 3
  v4 -= vF
  if v4 == -2 then v4 := 0
  # Save all values for this enemy
  save v4
  return


: enemies # 30 of 'em
  0 0 0 0 0 # Type, Vx, X, Y, Vy
  0 0 0 0 0
  0 0 0 0 0
  0 0 0 0 0
  0 0 0 0 0
  0 0 0 0 0
  0 0 0 0 0
  0 0 0 0 0
  0 0 0 0 0
  0 0 0 0 0
  0 0 0 0 0
  0 0 0 0 0
  0 0 0 0 0
  0 0 0 0 0
  0 0 0 0 0
  0 0 0 0 0
  0 0 0 0 0
  0 0 0 0 0
  0 0 0 0 0
  0 0 0 0 0
  0 0 0 0 0
  0 0 0 0 0
  0 0 0 0 0
  0 0 0 0 0
  0 0 0 0 0
  0 0 0 0 0
  0 0 0 0 0
  0 0 0 0 0
  0 0 0 0 0
  0 0 0 0 0

:monitor enemies 50

: display-buffer
: display-buffer-plane1
  # 4 planes of 7.5 times 32 bytes each. 240 bytes per layer, 960 bytes total.
  # The image is layed out in consecutive vertical slices of 8 pixels wide
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
: display-buffer-plane1-plus-15
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

: display-buffer-plane2
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
: display-buffer-plane2-plus-15
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

: display-buffer-plane3
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
: display-buffer-plane3-plus-15
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

: display-buffer-plane4
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
: display-buffer-plane4-plus-15
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

: numbers-bcd
  0 0 0


: numbers
  :pointer number-zero
  :pointer number-one
  :pointer number-two
  :pointer number-three
  :pointer number-four
  :pointer number-five
  :pointer number-six
  :pointer number-seven
  :pointer number-eight
  :pointer number-nine

: number-zero
  0b00000000
  0b11000000
  0b11000000
  0b11000000

: number-one
  0b01000000
  0b01000000
  0b01000000
  0b01000000

: number-two
  0b10000000
  0b01000000
  0b10000000
  0b11000000

: number-three
  0b10000000
  0b01000000
  0b01000000
  0b10000000

: number-four
  0b10000000
  0b10000000
  0b11000000
  0b01000000

: number-five
  0b11000000
  0b10000000
  0b01000000
  0b10000000

: number-six
  0b01000000
  0b10000000
  0b11000000
  0b11000000

: number-seven
  0b11000000
  0b01000000
  0b10000000
  0b10000000

: number-eight
  0b11000000
  0b11000000
  0b11000000
  0b11000000

: number-nine
  0b11000000
  0b11000000
  0b01000000
  0b10000000

# Colours used:
# Light green   1101
# Dark green    1001
# Brown         0001
# Light gray    0100

: background1-sprite
  2 # Number of layers
  8 # Height
  0 # Plane 0
  :pointer background1-sprite-p0
  1 # Plane 1
  :pointer background1-sprite-p1

: background1-sprite-p0
  0b11111111
  0b11110011
  0b11100001
  0b11111111
  0b10011111
  0b00001111
  0b11111111
  0b11111111

: background1-sprite-p1
  0b00000000
  0b00001100
  0b00011110
  0b00000000
  0b01100000
  0b11110000
  0b00000000
  0b00000000

: background2-sprite
  2 # Number of layers
  7 # Height
  0 # Plane 0
  :pointer background2-sprite-p0
  1 # Plane 1
  :pointer background2-sprite-p1

: background2-sprite-p0
  0b11101111
  0b11001111
  0b00000111
  0b00010010
  0b00001000
  0b00000000
  0b00000000

: background2-sprite-p1
  0b00010000
  0b00111000
  0b11111100
  0b11111111
  0b11111111
  0b11111111
  0b11111111

: background3-sprite
  3 # Number of layers
  5 # Height
  4 # Mask
  :pointer background3-sprite-m
  5 # Mask
  :pointer background3-sprite-m
  3 # Plane 3
  :pointer background3-sprite-1

: background3-sprite-m
  0b00010000
  0b00111100
  0b01111110
  0b11111111
  0b11111111

: background3-sprite-1
  0b00000000
  0b00110000
  0b01111100
  0b11011110
  0b10111111

: background4-sprite
  4 # Number of layers
  8 # Height
  0 # Plane 0
  :pointer background4-sprite-p0
  1 # Plane 1
  :pointer background4-sprite-p12
  2 # Plane 2
  :pointer background4-sprite-p12
  3 # Plane 3
  :pointer background4-sprite-p3

: background4-sprite-p0
  0b00011000
  0b00111100
  0b01110110
  0b11111011
  0b11011111
  0b11111111
  0b11111111
  0b11111111

: background4-sprite-p12
  0b00010000
  0b00100000
  0b01000000
  0b10000000
  0b00000000
  0b00000000
  0b00000000
  0b00000000

: background4-sprite-p3
  0b11111111
  0b11111111
  0b11111111
  0b11111111
  0b11111111
  0b11111111
  0b11111111
  0b11111111

: background5-sprite
  3 # Number of layers
  8 # Height
  0 # Plane 0
  :pointer background5-sprite-p01
  1 # Plane 1
  :pointer background5-sprite-p01
  3 # Plane 3
  :pointer background5-sprite-p3

: background5-sprite-p01
  0b00000000
  0b00011100
  0b01111110
  0b11111111
  0b11111111
  0b11111111
  0b11111111
  0b00000000

: background5-sprite-p3
  0b00000000
  0b00011000
  0b01111100
  0b11011110
  0b11111011
  0b10111111
  0b11111111
  0b11111111

: player-sprite
  6 # Number of layers
  7 # Height
  4 # Mask
  :pointer player-sprite-m
  5 # Mask
  :pointer player-sprite-m
  6 # Mask
  :pointer player-sprite-m
  7 # Mask
  :pointer player-sprite-m
  1 # Plane 1
  :pointer player-sprite-p1
  2 # Plane 3
  :pointer player-sprite-p2

: player-sprite-m
  0b11100000
  0b11111000
  0b11111110
  0b11111111
  0b11111110
  0b11111000
  0b11100000

: player-sprite-p1
  0b00000000
  0b01100000
  0b01111000
  0b01111110
  0b01111000
  0b01100000
  0b00000000

: player-sprite-p2
  0b00000000
  0b00000000
  0b01111000
  0b00000000
  0b01111000
  0b00000000
  0b00000000

: laser-sprite
  4 # Number of layers
  1 # Height
  4 # Mask
  :pointer laser-sprite-m
  5 # Mask
  :pointer laser-sprite-m
  7 # Mask
  :pointer laser-sprite-m
  2 # Plane 2
  :pointer laser-sprite-m

: laser-sprite-m
  0b00111000

: shield-sprite
  4 # Number of layers
  9 # Height
  7 # Mask
  :pointer shield-sprite-m
  0 # Plane 0
  :pointer shield-sprite-m
  1 # Plane 1
  :pointer shield-sprite-m
  2 # Plane 2
  :pointer shield-sprite-m

: low-shield-sprite
  4 # Number of layers
  9 # Height
  6 # Mask
  :pointer shield-sprite-m
  7 # Mask
  :pointer shield-sprite-m
  4 # Plane 0
  :pointer shield-sprite-m
  1 # Plane 1
  :pointer shield-sprite-m

: shield-sprite-m
  0b11100000
  0b00011000
  0b00000110
  0b00000001
  0b00000000
  0b00000001
  0b00000110
  0b00011000
  0b11100000

: enemy1-sprite
  6 # Number of layers
  4 # Height
  4 # Mask
  :pointer enemy1-sprite-m
  5 # Mask
  :pointer enemy1-sprite-m
  6 # Mask
  :pointer enemy1-sprite-m
  7 # Mask
  :pointer enemy1-sprite-m
  1 # Plane 1
  :pointer enemy1-sprite-p1
  2 # Plane 2
  :pointer enemy1-sprite-p2

: enemy1-sprite-m
  0b01111110
  0b11111111
  0b11111111
  0b01111110

: enemy1-sprite-p1
  0b00000000
  0b01010100
  0b00000000
  0b00000000

: enemy1-sprite-p2
  0b00000000
  0b00101001
  0b01111101
  0b00000000

: enemy2-sprite
  6 # Number of layers
  4 # Height
  4 # Mask
  :pointer enemy2-sprite-m
  5 # Mask
  :pointer enemy2-sprite-m
  6 # Mask
  :pointer enemy2-sprite-m
  7 # Mask
  :pointer enemy2-sprite-m
  0 # Plane 0
  :pointer enemy2-sprite-p0
  1 # Plane 1
  :pointer enemy2-sprite-p1

: enemy2-sprite-m
  0b00011000
  0b01111110
  0b11111111
  0b01111110

: enemy2-sprite-p0
  0b00000000
  0b00011000
  0b01010100
  0b00000000

: enemy2-sprite-p1
  0b00000000
  0b00011000
  0b00101010
  0b00000000

: explosion1-sprite
  8 # Number of layers
  5 # Height
  4 # Mask
  :pointer explosion1-sprite-m
  5 # Mask
  :pointer explosion1-sprite-m
  6 # Mask
  :pointer explosion1-sprite-m
  7 # Mask
  :pointer explosion1-sprite-m
  0 # Plane 1
  :pointer explosion1-sprite-p01
  1 # Plane 1
  :pointer explosion1-sprite-p01
  2 # Plane 2
  :pointer explosion1-sprite-p2
  3 # Plane 3
  :pointer explosion1-sprite-p3

: explosion1-sprite-m
  0b00000000
  0b00111100
  0b01111110
  0b00111100
  0b00000000

: explosion1-sprite-p01
  0b00000000
  0b00111100
  0b01000010
  0b00111100
  0b00000000

: explosion1-sprite-p2
  0b00000000
  0b00111100
  0b01100110
  0b00111100
  0b00000000

: explosion1-sprite-p3
  0b00000000
  0b00000000
  0b00011000
  0b00000000
  0b00000000

: explosion2-sprite
  8 # Number of layers
  5 # Height
  4 # Mask
  :pointer explosion2-sprite-m
  5 # Mask
  :pointer explosion2-sprite-m
  6 # Mask
  :pointer explosion2-sprite-m
  7 # Mask
  :pointer explosion2-sprite-m
  0 # Plane 1
  :pointer explosion2-sprite-p01
  1 # Plane 1
  :pointer explosion2-sprite-p01
  2 # Plane 2
  :pointer explosion2-sprite-p2
  3 # Plane 3
  :pointer explosion2-sprite-p3

: explosion2-sprite-m
  0b00111100
  0b01111110
  0b01111110
  0b01111110
  0b00111100

: explosion2-sprite-p01
  0b00111100
  0b01000010
  0b01000010
  0b01000010
  0b00111100

: explosion2-sprite-p2
  0b00111100
  0b01111110
  0b01100110
  0b01111110
  0b00111100

: explosion2-sprite-p3
  0b00000000
  0b00000000
  0b00011000
  0b00000000
  0b00000000

: explosion3-sprite
  8 # Number of layers
  5 # Height
  4 # Mask
  :pointer explosion3-sprite-m
  5 # Mask
  :pointer explosion3-sprite-m
  6 # Mask
  :pointer explosion3-sprite-m
  7 # Mask
  :pointer explosion3-sprite-m
  0 # Plane 0
  :pointer explosion3-sprite-p01
  1 # Plane 1
  :pointer explosion3-sprite-p01
  2 # Plane 2
  :pointer explosion3-sprite-p2
  3 # Plane 3
  :pointer explosion3-sprite-p3

# Yellow  1110
# Red     0010
# Brown   0001

: explosion3-sprite-m
  0b01111110
  0b11111111
  0b11111111
  0b11111111
  0b01111110

: explosion3-sprite-p01
  0b01111110
  0b10000001
  0b11000011
  0b10000001
  0b01111110

: explosion3-sprite-p2
  0b01111110
  0b11100111
  0b11011011
  0b11100111
  0b01111110

: explosion3-sprite-p3
  0b00000000
  0b00011000
  0b00100100
  0b00011000
  0b00000000

: hud-top-sprite
  0b01100000
  0b01100000
  0b01000000
  0b01000000
  0b00000000
  0b01000000
  0b01100000
  0b01000000
  0b00100000
  0b00000000
  0b01100000
  0b01000000
  0b00100000
  0b01100000
  0b00000000

: hud-bottom-sprite
  0b00000000
  0b01000000
  0b01000000
  0b01000000
  0b01100000
  0b00000000
  0b00000000
  0b10100000
  0b10100000
  0b01000000
  0b00000000
  0b01000000
  0b01000000
  0b01000000
  0b01100000

: power-bar
  0b00000001

:stringmode ascii "\0 !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~" {
  :byte { VALUE }
}

: level-string
  ascii "Level"

: get-ready-string
  ascii "GET READY!"

: game-over-string
  ascii "-= GAME OVER =-"

#####################
# Text font data

: font

  # Ascii 32 - 47: special characters

  0
  0 0 0 0 0 # Placeholder for end of string

  2
  0 0 0 0 0 # Space

  2
  0b10000000 # !
  0b10000000
  0b10000000
  0b00000000
  0b10000000

  4
  0b10100000 # "
  0b10100000
  0b00000000
  0b00000000
  0b00000000

  6
  0b01010000 # #
  0b11111000
  0b01010000
  0b11111000
  0b01010000

  6
  0b01111000 # $
  0b10100000
  0b01110000
  0b00101000
  0b11110000

  4
  0b10100000 # %
  0b00100000
  0b01000000
  0b10000000
  0b10100000

  5
  0b01000000 # &
  0b10100000
  0b01000000
  0b10100000
  0b01110000

  2
  0b10000000 # '
  0b10000000
  0b00000000
  0b00000000
  0b00000000

  3
  0b01000000 # (
  0b10000000
  0b10000000
  0b10000000
  0b01000000

  3
  0b10000000 # )
  0b01000000
  0b01000000
  0b01000000
  0b10000000

  6
  0b00100000 # *
  0b10101000
  0b01110000
  0b10101000
  0b00100000

  4
  0b00000000 # +
  0b01000000
  0b11100000
  0b01000000
  0b00000000

  3
  0b00000000 # ,
  0b00000000
  0b00000000
  0b01000000
  0b10000000

  4
  0b00000000 # -
  0b00000000
  0b11100000
  0b00000000
  0b00000000

  2
  0b00000000 # .
  0b00000000
  0b00000000
  0b00000000
  0b10000000

  4
  0b00100000 # /
  0b00100000
  0b01000000
  0b10000000
  0b10000000

: font-numbers

  # Ascii 48 - 57: Numbers

  5
  0b01000000 # 0
  0b10100000
  0b10100000
  0b10100000
  0b01000000

  4
  0b01000000 # 1
  0b11000000
  0b01000000
  0b01000000
  0b11100000

  5
  0b11000000 # 2
  0b00100000
  0b01000000
  0b10000000
  0b11100000

  5
  0b11000000 # 3
  0b00100000
  0b01000000
  0b00100000
  0b11000000

  5
  0b10000000 # 4
  0b10100000
  0b11100000
  0b00100000
  0b00100000

  5
  0b11100000 # 5
  0b10000000
  0b11000000
  0b00100000
  0b11000000

  5
  0b01100000 # 6
  0b10000000
  0b11000000
  0b10100000
  0b01000000

  5
  0b11100000 # 7
  0b00100000
  0b01000000
  0b10000000
  0b10000000

  5
  0b01000000 # 8
  0b10100000
  0b01000000
  0b10100000
  0b01000000

  5
  0b01100000 # 9
  0b10100000
  0b01100000
  0b00100000
  0b01000000


  # Ascii 58 - 64: More special characters

  2
  0b00000000 # :
  0b10000000
  0b00000000
  0b10000000
  0b00000000

  3
  0b00000000 # ;
  0b01000000
  0b00000000
  0b01000000
  0b10000000

  4
  0b00100000 # <
  0b01000000
  0b10000000
  0b01000000
  0b00100000

  4
  0b00000000 # =
  0b11100000
  0b00000000
  0b11100000
  0b00000000

  4
  0b10000000 # >
  0b01000000
  0b00100000
  0b01000000
  0b10000000

  4
  0b11000000 # ?
  0b00100000
  0b01000000
  0b00000000
  0b01000000

  5
  0b01100000 # @
  0b10010000
  0b10110000
  0b10000000
  0b01100000


  # Ascii 65 - 90: Capital letters

  5
  0b01100000 # A
  0b10010000
  0b11110000
  0b10010000
  0b10010000

  5
  0b11100000 # B
  0b10010000
  0b11100000
  0b10010000
  0b11100000

  5
  0b01110000 # C
  0b10000000
  0b10000000
  0b10000000
  0b01110000

  5
  0b11100000 # D
  0b10010000
  0b10010000
  0b10010000
  0b11100000

  4
  0b11100000 # E
  0b10000000
  0b11100000
  0b10000000
  0b11100000

  4
  0b11100000 # F
  0b10000000
  0b11000000
  0b10000000
  0b10000000

  5
  0b01110000 # G
  0b10000000
  0b10110000
  0b10010000
  0b01100000

  5
  0b10010000 # H
  0b10010000
  0b11110000
  0b10010000
  0b10010000

  4
  0b11100000 # I
  0b01000000
  0b01000000
  0b01000000
  0b11100000

  4
  0b11100000 # J
  0b00100000
  0b00100000
  0b00100000
  0b11000000

  5
  0b10010000 # K
  0b10100000
  0b11000000
  0b10100000
  0b10010000

  4
  0b10000000 # L
  0b10000000
  0b10000000
  0b10000000
  0b11100000

  6
  0b10001000 # M
  0b11011000
  0b10101000
  0b10001000
  0b10001000

  5
  0b10010000 # N
  0b11010000
  0b11110000
  0b10110000
  0b10010000

  5
  0b01100000 # O
  0b10010000
  0b10010000
  0b10010000
  0b01100000

  5
  0b11100000 # P
  0b10010000
  0b11100000
  0b10000000
  0b10000000

  5
  0b01100000 # Q
  0b10010000
  0b10010000
  0b10110000
  0b01110000

  5
  0b11100000 # R
  0b10010000
  0b11100000
  0b10010000
  0b10010000

  5
  0b01110000 # S
  0b10000000
  0b01100000
  0b00010000
  0b11100000

  6
  0b11111000 # T
  0b00100000
  0b00100000
  0b00100000
  0b00100000

  5
  0b10010000 # U
  0b10010000
  0b10010000
  0b10010000
  0b01100000

  5
  0b10010000 # V
  0b10010000
  0b10010000
  0b01100000
  0b01100000

  6
  0b10001000 # W
  0b10001000
  0b10101000
  0b11011000
  0b10001000

  6
  0b10001000 # X
  0b01010000
  0b00100000
  0b01010000
  0b10001000

  6
  0b10001000 # Y
  0b01010000
  0b00100000
  0b00100000
  0b00100000

  4
  0b11100000 # Z
  0b00100000
  0b01000000
  0b10000000
  0b11100000


  # Ascii 91 - 96: Even more special characters

  3
  0b11000000 # [
  0b10000000
  0b10000000
  0b10000000
  0b11000000

  4
  0b10000000 # \
  0b10000000
  0b01000000
  0b00100000
  0b00100000

  3
  0b11000000 # ]
  0b01000000
  0b01000000
  0b01000000
  0b11000000

  4
  0b01000000 # ^
  0b10100000
  0b00000000
  0b00000000
  0b00000000

  4
  0b00000000 # _
  0b00000000
  0b00000000
  0b00000000
  0b11100000

  3
  0b10000000 # `
  0b01000000
  0b00000000
  0b00000000
  0b00000000


  # Ascii 97 - 122: Lower case letters

  4
  0b00000000 # a
  0b01100000
  0b10100000
  0b10100000
  0b01100000

  4
  0b10000000 # b
  0b10000000
  0b11000000
  0b10100000
  0b11000000

  4
  0b00000000 # c
  0b01100000
  0b10000000
  0b10000000
  0b01100000

  4
  0b00100000 # d
  0b00100000
  0b01100000
  0b10100000
  0b01100000

  4
  0b00000000 # e
  0b01000000
  0b10100000
  0b11000000
  0b01100000

  3
  0b01000000 # f
  0b10000000
  0b11000000
  0b10000000
  0b10000000

  4
  0b00000000 # g
  0b01100000
  0b10100000
  0b01100000
  0b11000000

  4
  0b10000000 # h
  0b10000000
  0b11000000
  0b10100000
  0b10100000

  2
  0b10000000 # i
  0b00000000
  0b10000000
  0b10000000
  0b10000000

  3
  0b01000000 # j
  0b00000000
  0b01000000
  0b01000000
  0b10000000

  4
  0b10000000 # k
  0b10000000
  0b10100000
  0b11000000
  0b10100000

  3
  0b11000000 # l
  0b01000000
  0b01000000
  0b01000000
  0b01000000

  4
  0b00000000 # m
  0b10100000
  0b11100000
  0b10100000
  0b10100000

  4
  0b00000000 # n
  0b11000000
  0b10100000
  0b10100000
  0b10100000

  4
  0b00000000 # o
  0b01000000
  0b10100000
  0b10100000
  0b01000000

  4
  0b00000000 # P
  0b11000000
  0b10100000
  0b11000000
  0b10000000

  4
  0b00000000 # q
  0b01100000
  0b10100000
  0b01100000
  0b00100000

  4
  0b00000000 # r
  0b10100000
  0b11000000
  0b10000000
  0b10000000

  3
  0b00000000 # s
  0b01000000
  0b10000000
  0b01000000
  0b10000000

  3
  0b10000000 # t
  0b10000000
  0b11000000
  0b10000000
  0b01000000

  4
  0b00000000 # u
  0b10100000
  0b10100000
  0b10100000
  0b01000000

  4
  0b00000000 # v
  0b10100000
  0b10100000
  0b01000000
  0b01000000

  4
  0b00000000 # w
  0b10100000
  0b10100000
  0b11100000
  0b10100000

  4
  0b00000000 # x
  0b10100000
  0b01000000
  0b01000000
  0b10100000

  4
  0b00000000 # y
  0b10100000
  0b10100000
  0b01000000
  0b10000000

  3
  0b00000000 # z
  0b11000000
  0b01000000
  0b10000000
  0b11000000

  # Ascii 123 - 126: Even more characters

  4
  0b01100000 # {
  0b01000000
  0b10000000
  0b01000000
  0b01100000

  2
  0b10000000 # |
  0b10000000
  0b10000000
  0b10000000
  0b10000000

  4
  0b11000000 # }
  0b01000000
  0b00100000
  0b01000000
  0b11000000

  5
  0b00000000
  0b01010000 # ~
  0b10100000
  0b00000000
  0b00000000

: title-screen

# Sprite 1 (4 layers, 8 bytes per layer)
0x92 0x48 0x10 0x87 0x2c 0x48 0x0f 0x88
0xed 0xb7 0xef 0x7f 0xdf 0xbf 0xff 0x7f
0xb6 0xda 0x51 0xa7 0xac 0x48 0x4f 0x98
0x92 0x48 0x1e 0x98 0x33 0x57 0x10 0x87

# Sprite 2 (4 layers, 8 bytes per layer)
0x49 0x92 0x00 0x34 0xb5 0x91 0x95 0x95
0xb6 0xff 0xff 0xff 0xff 0xff 0xff 0xff
0xdb 0xdb 0x24 0x34 0xb5 0x91 0x95 0x95
0x49 0x92 0xdb 0xcb 0x4a 0x6e 0x6a 0x6a

# Sprite 3 (4 layers, 8 bytes per layer)
0x24 0x48 0x00 0xe7 0x96 0xf4 0x05 0x05
0xdb 0xff 0xff 0xff 0xff 0xff 0xff 0xff
0x6d 0x6a 0x90 0xe7 0x96 0xf4 0x04 0x04
0x24 0x48 0x6f 0x18 0x69 0x0b 0xfa 0xfa

# Sprite 4 (4 layers, 8 bytes per layer)
0x92 0x49 0x00 0x95 0x40 0x4a 0x40 0x44
0x6d 0xb6 0xff 0xea 0xff 0xf4 0xfe 0xfa
0xb6 0xdb 0x15 0x95 0x4a 0x4a 0x48 0x44
0x92 0x49 0xc0 0x75 0xa0 0xaa 0xa0 0xa4

# Sprite 5 (4 layers, 8 bytes per layer)
0x6b 0x1b 0x56 0x36 0xaa 0x00 0x00 0x00
0xab 0xdb 0xd6 0xb6 0xff 0xab 0x00 0x7e
0xd6 0x74 0x6d 0xed 0xaa 0x01 0x00 0x00
0x40 0x40 0x40 0x80 0xaa 0xa8 0x00 0x00

# Sprite 6 (4 layers, 8 bytes per layer)
0x6e 0x6d 0xdd 0xdb 0xdb 0xaa 0x00 0x00
0x6e 0x6d 0xdd 0xdb 0xdb 0x7f 0x2a 0x00
0xdd 0xdb 0xbb 0xb7 0xb6 0xaa 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0xaa 0x2a 0x00

# Sprite 7 (4 layers, 8 bytes per layer)
0xed 0xdd 0xbb 0xb7 0x76 0x88 0x02 0x00
0xed 0xdd 0xbb 0xb7 0x76 0x77 0x05 0x00
0xdb 0xbb 0x76 0x6e 0xed 0xaa 0x02 0x00
0x00 0x00 0x00 0x00 0x00 0x88 0x02 0x00

# Sprite 8 (4 layers, 8 bytes per layer)
0xbb 0xb7 0x76 0x6e 0xdd 0xdb 0xbb 0x08
0xbb 0xb7 0x76 0x6e 0xdd 0xdb 0x7b 0x76
0x77 0x6e 0xed 0xdd 0xbb 0xb6 0xb6 0x09
0x00 0x00 0x00 0x00 0x00 0x00 0xa0 0x08

# Sprite 9 (4 layers, 8 bytes per layer)
0x28 0x00 0x00 0x70 0x26 0xa5 0x25 0x25
0xdf 0xff 0xff 0xff 0xff 0x7f 0xff 0xff
0x28 0x41 0x00 0x74 0x26 0x25 0x25 0x25
0x35 0x1c 0xf8 0x8b 0xd9 0x5a 0x5a 0xda

# Sprite 10 (4 layers, 8 bytes per layer)
0x94 0x00 0x03 0x04 0x54 0x53 0x54 0x54
0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff
0x94 0x00 0x03 0xa4 0x54 0x53 0x54 0x54
0x6b 0xff 0x0c 0x5b 0xab 0xac 0xab 0xab

# Sprite 11 (4 layers, 8 bytes per layer)
0xe4 0x00 0x04 0x80 0x9a 0x20 0x92 0x8a
0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff
0xe4 0x00 0x00 0x80 0x9a 0x20 0x92 0x8a
0x1a 0xfe 0xc0 0x7f 0x65 0xdf 0x6d 0x75

# Sprite 12 (4 layers, 8 bytes per layer)
0x50 0x08 0x9a 0x00 0x4c 0xaa 0xaa 0xaa
0xff 0xff 0xfd 0xff 0xff 0xff 0xff 0xff
0x52 0x00 0x02 0x08 0x4c 0xaa 0xaa 0xaa
0xb0 0xe0 0x02 0xf6 0xb3 0x55 0x55 0x55

# Sprite 13 (4 layers, 8 bytes per layer)
0x08 0x20 0x00 0x00 0x00 0x40 0xc0 0xa0
0x34 0x19 0xb9 0x91 0xd3 0x83 0xe2 0xe2
0x00 0x01 0x01 0x01 0x03 0x03 0x02 0x02
0x00 0x00 0x80 0x00 0x00 0x00 0x00 0x00

# Sprite 14 (4 layers, 8 bytes per layer)
0x00 0x00 0x04 0x00 0x00 0x00 0x08 0x10
0x67 0xef 0xda 0x9c 0xb0 0x60 0xc0 0x80
0x60 0xe0 0xc0 0x80 0x80 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00

# Sprite 15 (4 layers, 8 bytes per layer)
0x00 0x00 0x10 0x00 0x10 0x00 0x40 0x00
0x00 0x30 0x2b 0x7b 0x2b 0x77 0xaf 0xdf
0x00 0x00 0x03 0x03 0x03 0x07 0x0f 0x1f
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00

# Sprite 16 (4 layers, 8 bytes per layer)
0x01 0x00 0x00 0x00 0x00 0x00 0x02 0x00
0x22 0x00 0xf8 0xe1 0xe3 0xef 0x8d 0x9f
0x01 0x00 0xf8 0xe0 0xe0 0xe0 0x80 0x80
0x21 0x00 0x00 0x00 0x00 0x00 0x00 0x00

# Sprite 17 (4 layers, 8 bytes per layer)
0x75 0x00 0xfc 0xf4 0x09 0x72 0xf7 0xff
0xff 0xff 0x3f 0xff 0xff 0xff 0xff 0xff
0x75 0x00 0x00 0x00 0x00 0x00 0x62 0x54
0x8a 0xff 0x00 0x00 0x00 0x00 0x00 0x00

# Sprite 18 (4 layers, 8 bytes per layer)
0x23 0x00 0x1c 0xdb 0xbd 0x74 0xff 0xff
0xff 0xff 0xff 0xff 0x7f 0xff 0xff 0xff
0x23 0x00 0x00 0x00 0x00 0x00 0x4d 0xa9
0xdc 0xb7 0x00 0x00 0x00 0x00 0x00 0x00

# Sprite 19 (4 layers, 8 bytes per layer)
0x32 0x00 0xa0 0x40 0x81 0xa2 0xc1 0x82
0xff 0xff 0xf8 0xf0 0xf1 0xc2 0xe1 0xc2
0x32 0x00 0x00 0x00 0x00 0x00 0x80 0x00
0xcd 0xfb 0x06 0x0b 0x0c 0x15 0x1a 0x2c

# Sprite 20 (4 layers, 8 bytes per layer)
0x4a 0x00 0x40 0xa0 0x50 0xa8 0x55 0x22
0xff 0x7f 0x43 0xa1 0x50 0xa8 0x55 0x22
0x4a 0x00 0x00 0x20 0x00 0x00 0x00 0x0e
0xb5 0xff 0xb4 0x7c 0xa7 0x15 0xa2 0x91

# Sprite 21 (4 layers, 8 bytes per layer)
0x80 0x40 0x01 0x00 0x40 0x00 0x40 0x80
0xc1 0xc1 0x90 0x33 0x71 0x31 0x40 0x80
0x00 0x00 0x00 0xc0 0xc0 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x40 0xa0 0x30

# Sprite 22 (4 layers, 8 bytes per layer)
0x20 0x20 0x00 0x00 0x00 0x08 0x00 0x01
0x81 0x01 0x03 0x86 0x9d 0x32 0x30 0x00
0x00 0x00 0x00 0x00 0x01 0x02 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00

# Sprite 23 (4 layers, 8 bytes per layer)
0x00 0x80 0x00 0x00 0x03 0x03 0x86 0x8f
0xdf 0x3c 0x70 0xe0 0x80 0x00 0x80 0x00
0x1f 0x3c 0x70 0xe0 0x80 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x01 0x02 0x07

# Sprite 24 (4 layers, 8 bytes per layer)
0x04 0x00 0x07 0xff 0xff 0xff 0xff 0xff
0x18 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x05 0x0b 0x3b 0x7f 0xf8 0xf2
0x00 0x00 0x02 0x74 0xc4 0x80 0x07 0x0d

# Sprite 25 (4 layers, 8 bytes per layer)
0xff 0xff 0x7e 0xff 0xff 0xff 0xff 0x7b
0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff
0x64 0x44 0x00 0x22 0x52 0x73 0x52 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00

# Sprite 26 (4 layers, 8 bytes per layer)
0xff 0xff 0x7f 0x7f 0xff 0xfb 0xff 0xbb
0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xfb
0xc4 0x6d 0x00 0x12 0xaa 0x35 0x9a 0x40
0x00 0x00 0x00 0x00 0x00 0x04 0x00 0x44

# Sprite 27 (4 layers, 8 bytes per layer)
0xd4 0xea 0xd1 0xeb 0xcd 0xca 0x14 0xa8
0xd4 0xea 0xd1 0xeb 0xcd 0xca 0x14 0xa8
0x80 0x80 0x00 0x80 0x80 0x00 0x01 0x03
0x23 0x14 0x2a 0x04 0x32 0x24 0xaa 0x50

# Sprite 28 (4 layers, 8 bytes per layer)
0x44 0xa6 0x49 0x98 0x30 0x22 0x45 0xab
0x44 0xa6 0x49 0x98 0x30 0x22 0x45 0xab
0x1c 0x3c 0x38 0x70 0x60 0x00 0xc0 0x80
0xa1 0x61 0x84 0x07 0x85 0x99 0x2a 0x14

# Sprite 29 (4 layers, 8 bytes per layer)
0x50 0x28 0x04 0x80 0x14 0x82 0x13 0xaa
0x50 0x28 0x04 0x80 0x14 0x82 0x13 0xaa
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x08
0xa8 0x44 0xa3 0x60 0x0a 0x45 0xa8 0x5c

# Sprite 30 (4 layers, 8 bytes per layer)
0x17 0x4f 0x00 0x41 0x03 0x83 0x47 0x9f
0x17 0x7f 0xff 0x79 0x12 0x82 0x44 0x98
0x00 0x00 0x00 0x07 0x0e 0x1e 0x3c 0x38
0x00 0x00 0x00 0x80 0x61 0x21 0x83 0x47

# Sprite 31 (4 layers, 8 bytes per layer)
0x1f 0x7f 0xff 0xff 0xef 0xff 0xfe 0xff
0x00 0x40 0x80 0x00 0x00 0x00 0x00 0x00
0xc1 0xc2 0x0d 0x1b 0x06 0x2c 0x1e 0xfd
0x0e 0x1d 0x72 0xe4 0xe9 0xd3 0xe0 0x02

# Sprite 32 (4 layers, 8 bytes per layer)
0xfb 0xff 0xef 0xff 0xbf 0xff 0xff 0xff
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0xe1 0xc3 0x87 0x0f 0x9f 0x3f 0xff 0xff
0x1a 0x3c 0x68 0xf0 0x20 0xc0 0x00 0x00

: vanity

# Sprite 1 (3 layers, 8 bytes per layer)
0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff
0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff
0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff

# Sprite 2 (3 layers, 8 bytes per layer)
0xff 0xff 0xff 0xff 0xf8 0xfe 0xfe 0xfe
0xff 0xff 0xff 0xff 0xf8 0xfe 0xfe 0xfe
0xff 0xff 0xff 0xff 0xf8 0xfe 0xfe 0xfe

# Sprite 3 (3 layers, 8 bytes per layer)
0xff 0xff 0xff 0xff 0x2f 0xff 0xc9 0xea
0xff 0xff 0xff 0xff 0x2f 0xff 0xc9 0xea
0xff 0xff 0xff 0xff 0x2f 0x7f 0xc9 0xea

# Sprite 4 (3 layers, 8 bytes per layer)
0xff 0xff 0xff 0xff 0xff 0xff 0x73 0xad
0xff 0xff 0xff 0xff 0xff 0xff 0x73 0xad
0xff 0xff 0xff 0xff 0xff 0xff 0x73 0xad

# Sprite 5 (3 layers, 8 bytes per layer)
0xff 0xff 0xff 0xff 0xff 0xff 0x1c 0x6b
0xff 0xff 0xff 0xff 0xff 0xff 0x1c 0x6b
0xff 0xff 0xff 0xff 0xff 0xff 0x1c 0x2b

# Sprite 6 (3 layers, 8 bytes per layer)
0xff 0xff 0xff 0xff 0x7f 0x7f 0x5b 0x5a
0xff 0xff 0xff 0xff 0x7f 0x7f 0x5b 0x5a
0xff 0xff 0xff 0xff 0x7f 0x7f 0x5b 0x5a

# Sprite 7 (3 layers, 8 bytes per layer)
0xff 0xff 0xff 0xff 0xff 0xff 0x3f 0xff
0xff 0xff 0xff 0xff 0xff 0xff 0x3f 0xff
0xff 0xff 0xff 0xff 0xff 0xff 0x3f 0xff

# Sprite 8 (3 layers, 8 bytes per layer)
0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff
0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff
0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff

# Sprite 9 (3 layers, 8 bytes per layer)
0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff
0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff
0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff

# Sprite 10 (3 layers, 8 bytes per layer)
0xfe 0xfe 0xfe 0xff 0xff 0xff 0xff 0xf3
0xfe 0xfe 0xfe 0xff 0xff 0xff 0xff 0xf3
0xfe 0xfe 0xfe 0xff 0xff 0xff 0xff 0xff

# Sprite 11 (3 layers, 8 bytes per layer)
0xea 0xeb 0xeb 0xff 0xff 0xff 0xff 0x77
0xea 0xeb 0xeb 0xff 0xff 0xff 0xff 0x77
0xea 0xeb 0xeb 0xff 0xff 0xff 0xff 0xff

# Sprite 12 (3 layers, 8 bytes per layer)
0xa1 0xaf 0xb3 0xff 0xff 0xff 0xff 0xef
0xa1 0xaf 0xb3 0xff 0xff 0xff 0xff 0xef
0xa1 0xaf 0xb1 0xff 0xff 0xff 0xff 0xff

# Sprite 13 (3 layers, 8 bytes per layer)
0x6b 0x6b 0x6c 0xff 0xff 0xff 0xff 0xff
0x6b 0x6b 0x6c 0xff 0xff 0xff 0xff 0xff
0x6b 0x6b 0x6c 0xff 0xff 0xff 0xff 0xff

# Sprite 14 (3 layers, 8 bytes per layer)
0x5b 0x5b 0x62 0xff 0xff 0xff 0xff 0x76
0x5b 0x5b 0x62 0xff 0xff 0xff 0xff 0x76
0x5b 0x5b 0x62 0xff 0xff 0xff 0xff 0xff

# Sprite 15 (3 layers, 8 bytes per layer)
0x7f 0xbf 0x7f 0xff 0xff 0xff 0xff 0xef
0x7f 0xbf 0x7f 0xff 0xff 0xff 0xff 0xef
0x7f 0xbf 0x7f 0xff 0xff 0xff 0xff 0xff

# Sprite 16 (3 layers, 8 bytes per layer)
0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff
0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff
0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff

# Sprite 17 (3 layers, 8 bytes per layer)
0x00 0x00 0xff 0xff 0xff 0xff 0xff 0xff
0x00 0x00 0xff 0xff 0xff 0xff 0xff 0xff
0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff

# Sprite 18 (3 layers, 8 bytes per layer)
0x6d 0x6d 0xf3 0xff 0xff 0xff 0xfc 0xfd
0x6d 0x6d 0xf3 0xff 0xff 0xff 0xfc 0xfd
0xff 0xff 0xff 0xff 0xff 0xff 0xfc 0xfc

# Sprite 19 (3 layers, 8 bytes per layer)
0x53 0x36 0x5b 0xff 0xff 0xff 0x3f 0xdf
0x53 0x36 0x5b 0xff 0xff 0xff 0x3f 0xdf
0xff 0xff 0xff 0xff 0xff 0xff 0x3f 0xdf

# Sprite 20 (3 layers, 8 bytes per layer)
0x67 0xaa 0x67 0xff 0xff 0xff 0xff 0xff
0x67 0xaa 0x67 0xff 0xff 0xff 0xff 0xff
0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff

# Sprite 21 (3 layers, 8 bytes per layer)
0x27 0x6f 0x2f 0xff 0xff 0xff 0xff 0xff
0x27 0x6f 0x2f 0xff 0xff 0xff 0xff 0xff
0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff

# Sprite 22 (3 layers, 8 bytes per layer)
0xab 0x6a 0x36 0xff 0xff 0xff 0xef 0xef
0xab 0x6a 0x36 0xff 0xff 0xff 0xef 0xef
0xff 0xff 0xff 0xff 0xff 0xff 0xef 0xef

# Sprite 23 (3 layers, 8 bytes per layer)
0x4e 0xee 0x47 0xff 0xff 0xff 0xff 0xff
0x4e 0xee 0x47 0xff 0xff 0xff 0xff 0xff
0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff

# Sprite 24 (3 layers, 8 bytes per layer)
0x00 0x00 0xff 0xff 0xff 0xff 0xff 0xff
0x00 0x00 0xff 0xff 0xff 0xff 0xff 0xff
0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff

# Sprite 25 (3 layers, 8 bytes per layer)
0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff
0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff
0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff

# Sprite 26 (3 layers, 8 bytes per layer)
0xfd 0xfc 0xfd 0xfd 0xfd 0xff 0xff 0xff
0xfd 0xfc 0xfd 0xfd 0xfd 0xff 0xff 0xff
0xfd 0xfc 0xfd 0xfd 0xfd 0xff 0xff 0xff

# Sprite 27 (3 layers, 8 bytes per layer)
0xd5 0x33 0xf7 0xf7 0xf7 0xff 0xff 0xff
0xd5 0x33 0xf7 0xf7 0xf7 0xff 0xff 0xff
0xd5 0x33 0xf7 0xf7 0xf7 0xff 0xff 0xff

# Sprite 28 (3 layers, 8 bytes per layer)
0x9c 0x6b 0x0d 0x7e 0x99 0xff 0xff 0xff
0x9c 0x6b 0x0d 0x7e 0x99 0xff 0xff 0xff
0x9c 0x6b 0x0d 0x7e 0x89 0xff 0xff 0xff

# Sprite 29 (3 layers, 8 bytes per layer)
0xcc 0xb5 0x85 0xbd 0xcd 0xff 0xff 0xff
0xcc 0xb5 0x85 0xbd 0xcd 0xff 0xff 0xff
0xcc 0xb4 0x85 0xbd 0xc5 0xff 0xff 0xff

# Sprite 30 (3 layers, 8 bytes per layer)
0x66 0xad 0xae 0xaf 0xb4 0xff 0xff 0xff
0x66 0xad 0xae 0xaf 0xb4 0xff 0xff 0xff
0x66 0xad 0xae 0xaf 0xb4 0xff 0xff 0xff

# Sprite 31 (3 layers, 8 bytes per layer)
0x7f 0xff 0xff 0x7f 0xff 0xff 0xff 0xff
0x7f 0xff 0xff 0x7f 0xff 0xff 0xff 0xff
0x7f 0xff 0xff 0x7f 0xff 0xff 0xff 0xff

# Sprite 32 (3 layers, 8 bytes per layer)
0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff
0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff
0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff