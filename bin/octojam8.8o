:macro s8plane N {
	:byte { 0xF0 + N }
	:byte 0x01
}

:macro mark-screen-clean {
  i := dirty
  v0 := 0
  save v0
}

:macro mark-screen-dirty {
  i := dirty
  v0 := 1
  save v0
}


: main
  hires

: main-redraw
  render-scene
  mark-screen-clean
: main-loop
  #clock-tick
  check-keys
  i := long dirty    # Is the screen dirty?
  load v0
  if v0 == 1 then jump main-redraw
  jump main-loop

: render-scene
  display-clear
  render-background
  render-player
  display-copy
  return

: render-background
  v2 := 0 # X
  v3 := 0 # Y
  loop
    :unpack long background-sprite
    v4 := 8  # height
    display-sprite
    v2 += 8
    if v2 == 128 begin
      v2 := 0
      v3 += 8
      if v3 == 64 then return
    end
  again

: render-player
  i := player
  load v1
  v2 := v0 # X
  v3 := v1 # Y
  :unpack long my-sprite
  v4 := 5  # height
  display-sprite
  return



: player
  0 0 # X, Y
: player-orientation
  0 # orientation

: dirty
  0

#####################
# Non-blocking key input check
# Updates the player data on input, checks for collisions
# Destroys v0 - v3
: check-keys
  v0 := OCTO_KEY_A
  if v0 key then jump move-left
  v0 := OCTO_KEY_D
  if v0 key then jump move-right
  v0 := OCTO_KEY_W
  if v0 key then jump move-up
  v0 := OCTO_KEY_S
  if v0 key then jump move-down
  return

: move-right
  i := long player
  load v1
  v0 += 1
  jump collide-or-save
: move-left
  i := long player
  load v1
  v0 -= 1
  jump collide-or-save
: move-up
  i := long player
  load v1
  v1 -= 1
  jump collide-or-save
: move-down
  i := long player
  load v1
  v1 += 1
  # Fall through

: collide-or-save
  # TODO: Check for colission
  i := long player
  save v1
  mark-screen-dirty
  return

# Blocking "press any key" routine
# (does play music though)
# Returns pressed key in v5
: wait-key-press
  vA := 0
: wait-key-press-loop
  #clock-tick
  if vA key then return
  vA += 1
  if vA != 16 then jump wait-key-press-loop
  jump wait-key-press


: background-sprite
  0b00001000
  0b00100001
  0b00000100
  0b10000000
  0b00010010
  0b01000000
  0b00000100
  0b10010000

: my-sprite
  0b11010110
  0b00111000
  0b01111110
  0b10101000
  0b00100100

# Show the contents of the display buffer on the screen
: display-copy
  :alias X v0
  :alias Y v1
  :alias N1 v2
  :alias N2 v3
  X := 0
  N1 := 14
  N2 := 8
  i := long display-buffer
  clear
  loop
    Y := 0
    sprite X Y 14
    i += N1
    Y += N1
    sprite X Y 14
    i += N1
    Y += N1
    sprite X Y 14
    i += N1
    Y += N1
    sprite X Y 14
    i += N1
    Y += N1
    sprite X Y 8
    i += N2
    X += N2
  if X != 128 then again
  return

: display-clear
  i := display-buffer
  v0 := 0
  v1 := 0
  v2 := 0
  v3 := 0
  v4 := 0
  v5 := 0
  v6 := 0
  v7 := 0
  v8 := 0
  loop
    save v7
    v8 += 1
    if v8 == 128 then return
  again

# Render a sprite to the display buffer
# v0, v1 = sprite address
# v2 = X coordinate
# v3 = Y coordinate
# v4 = height (in pixels)
# Preserves X and Y
# Destroys v0, v1, v4 - v7 and i
# TODO: Don't render outside of buffer (dangerous!)
: display-sprite
  :alias X v2
  :alias Y v3
  :alias height v4
  :alias row v5
  :alias leftPart v6
  :alias rightPart v7
  :alias offset v1
  :alias temp1 v8
  :alias temp2 v9

  row := 0
  i := display-sprite-address
  save v1

  loop
    if row == height then return

    # Get the sprite data to put on the display buffer
    0xF0 0x00 # i := long ....
  : display-sprite-address
    0x00 0x00
    i += row
    load v0

    offset := 0b00000111
    offset &= X
    rightPart := 0
    leftPart := v0

    # Do some shifting magic for unaligned sprites
    loop
      while offset != 0
      rightPart >>= rightPart
      leftPart >>= leftPart
      if vF != 0 then rightPart += 128
      offset -= 1
    again

    # Write the new data to the buffer
    display-buffer-address
    load v0
    v0 |= leftPart
    temp1 := v0
      vF := 63
      i += vF
    load v0
    v0 |= rightPart
    temp2 := v0

    display-buffer-address
    v0 := temp1
    save v0
      vF := 63
      i += vF
    v0 := temp2
    save v0

    row += 1
  again

# Get a pointer into the right bytes of the buffer
: display-buffer-address
  # Calculate place in buffer
  offset := X
  offset >>= offset
  offset >>= offset
  offset >>= offset
  i := long display-buffer
  v0 := 64
  loop
    while offset != 0
    i += v0
    offset -= 1
  again
  i += Y
  i += row
  return


: display-buffer
  # 4 times 8 lines of 32 bytes each = 1024 bytes
  # The image is layed out in consecutive vertical slices of 8 pixels wide
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0