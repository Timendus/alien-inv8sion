:macro s8plane N {
	:byte { 0xF0 + N }
	:byte 0x01
}


: main
  lores

: main-redraw
  v0 := 1
  delay := v0
  loop
    v0 := delay
    if v0 != 0 then
  again

  clock-tick
  check-keys
  render-scene
  jump main-redraw

: clock-tick
  i := long tick
  load v0 - v0 # Don't auto-increment i
  v0 += 1
  save v0
  return

# Show the contents of the display buffer on the screen
: display-copy-values
  0 1 8 16 24 32 40 48 56 15
: display-copy
  i := display-copy-values
  load v9
  i := display-buffer

  s8plane 0xF
  clear

  s8plane 1
  sprite v0 v1 15   i += v9
  sprite v0 v3 15   i += v9
  sprite v2 v1 15   i += v9
  sprite v2 v3 15   i += v9
  sprite v3 v1 15   i += v9
  sprite v3 v3 15   i += v9
  sprite v4 v1 15   i += v9
  sprite v4 v3 15   i += v9
  sprite v5 v1 15   i += v9
  sprite v5 v3 15   i += v9
  sprite v6 v1 15   i += v9
  sprite v6 v3 15   i += v9
  sprite v7 v1 15   i += v9
  sprite v7 v3 15   i += v9
  sprite v8 v1 15   i += v9
  sprite v8 v3 15   i += v9

  s8plane 2
  sprite v0 v1 15   i += v9
  sprite v0 v3 15   i += v9
  sprite v2 v1 15   i += v9
  sprite v2 v3 15   i += v9
  sprite v3 v1 15   i += v9
  sprite v3 v3 15   i += v9
  sprite v4 v1 15   i += v9
  sprite v4 v3 15   i += v9
  sprite v5 v1 15   i += v9
  sprite v5 v3 15   i += v9
  sprite v6 v1 15   i += v9
  sprite v6 v3 15   i += v9
  sprite v7 v1 15   i += v9
  sprite v7 v3 15   i += v9
  sprite v8 v1 15   i += v9
  sprite v8 v3 15   i += v9

  s8plane 4
  sprite v0 v1 15   i += v9
  sprite v0 v3 15   i += v9
  sprite v2 v1 15   i += v9
  sprite v2 v3 15   i += v9
  sprite v3 v1 15   i += v9
  sprite v3 v3 15   i += v9
  sprite v4 v1 15   i += v9
  sprite v4 v3 15   i += v9
  sprite v5 v1 15   i += v9
  sprite v5 v3 15   i += v9
  sprite v6 v1 15   i += v9
  sprite v6 v3 15   i += v9
  sprite v7 v1 15   i += v9
  sprite v7 v3 15   i += v9
  sprite v8 v1 15   i += v9
  sprite v8 v3 15   i += v9

  s8plane 8
  sprite v0 v1 15   i += v9
  sprite v0 v3 15   i += v9
  sprite v2 v1 15   i += v9
  sprite v2 v3 15   i += v9
  sprite v3 v1 15   i += v9
  sprite v3 v3 15   i += v9
  sprite v4 v1 15   i += v9
  sprite v4 v3 15   i += v9
  sprite v5 v1 15   i += v9
  sprite v5 v3 15   i += v9
  sprite v6 v1 15   i += v9
  sprite v6 v3 15   i += v9
  sprite v7 v1 15   i += v9
  sprite v7 v3 15   i += v9
  sprite v8 v1 15   i += v9
  sprite v8 v3 15   i += v9

  return

# Display buffer contains 8 * 15 * 2 bytes = 240 bytes per layer
# 240 / 15 = 16. So either load 16 values 15 times or the other way around
: display-clear-values
  0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0
: display-clear
  i := display-clear-values
  load vF
  i := display-buffer

  # Plane 1
  save vF  save vF  save vF  save vF
  save vF  save vF  save vF  save vF
  save vF  save vF  save vF  save vF
  save vF  save vF  save vF

  # Plane 2
  save vF  save vF  save vF  save vF
  save vF  save vF  save vF  save vF
  save vF  save vF  save vF  save vF
  save vF  save vF  save vF

  # Plane 3
  save vF  save vF  save vF  save vF
  save vF  save vF  save vF  save vF
  save vF  save vF  save vF  save vF
  save vF  save vF  save vF

  # Plane 4
  save vF  save vF  save vF  save vF
  save vF  save vF  save vF  save vF
  save vF  save vF  save vF  save vF
  save vF  save vF  save vF
  return

# Render a sprite to the display buffer
# v0, v1 = sprite address
# v2 = X coordinate
# v3 = Y coordinate
# v4 = height (in pixels)
# v5 = target plane (0-3)
# Preserves v2 - v5
# Destroys v0, v1, v6 - v9 and i

# Overhead: 5 instructions
# Per row: ~38 instructions
# Per shift: 7 instructions
# So for 8x8 sprite at bad alignment: 5 + 8 * (38 + 7*7) = 701 instructions
# For 8x8 sprite at good alignment: 5 + 8 * (38 + 2) = 325 instructions
: display-sprite
  :alias X v2
  :alias Y v3
  :alias height v4
  :alias targetplane v5
  :alias row v6
  :alias leftPart v7
  :alias rightPart v8
  :alias offset v1
  :alias temp1 v9

  row := 0
  i := display-sprite-address
  save v1

  # Normalize coordinates
  v0 := 31
  v3 &= v0
  v0 := 63
  v2 &= v0

  loop
    if row == height then return # Done
    v0 := Y
    v0 += row
    if v0 == 30 then return # Overflowing bottom of screen, so done

    # Get the sprite data to put on the display buffer
    0xF0 0x00 # i := long ....
  : display-sprite-address
    0x00 0x00
    i += row
    load v0

    offset := 0b00000111
    offset &= X
    rightPart := 0
    leftPart := v0

    # Do some shifting magic for unaligned sprites
    loop
      while offset != 0
      rightPart >>= rightPart
      leftPart >>= leftPart
      if vF != 0 then rightPart += 128
      offset -= 1
    again

    # Calculate place in buffer
    offset := X
    offset >>= offset
    offset >>= offset
    offset >>= offset
    i := long display-buffer
    # Get right plane
    v0 := 240
    temp1 := targetplane
    loop
      while temp1 > 0
      i += v0
      temp1 -= 1
    again
    # Get right column
    v0 := 30 # rows
    loop
      while offset != 0
      i += v0
      offset -= 1
    again
    # Get right row
    i += Y
    i += row

    # Write the new data to the buffer
    load v0 - v0 # Don't auto-increment i
    v0 |= leftPart
    save v0 - v0
    if X < 56 begin
      vF := 30
      i += vF
      load v0 - v0
      v0 |= rightPart
      save v0 - v0
    end

    row += 1
  again



: render-scene
  display-clear
  render-background
  render-player
  render-hud
  display-copy
  return

: render-background
  i := long tick
  load vE - vE

  vE >>= vE
  v0 := 7
  v0 &= vE
  v2 := 7
  v2 -= v0 # X
  v3 := 19 # Y
  #:breakpoint stop
  loop
    :unpack long background2-sprite
    v4 := 5 # height
    v5 := 1 # plane
    display-sprite
    v2 += 8
    if v2 < 64 then
  again

  vE >>= vE
  v0 := 7
  v0 &= vE
  v2 := 7
  v2 -= v0 # X
  v3 := 14 # Y
  #:breakpoint stop
  loop
    :unpack long background3-sprite
    v4 := 5 # height
    v5 := 1 # plane
    display-sprite
    v2 += 8
    if v2 < 64 then
  again

  vE >>= vE
  v0 := 7
  v0 &= vE
  v2 := 7
  v2 -= v0 # X
  v3 := 9 # Y
  loop
    :unpack long background2-sprite
    v4 := 5 # height
    v5 := 1 # plane
    display-sprite
    v2 += 8
    if v2 < 64 then
  again

  vE >>= vE
  v0 := 7
  v0 &= vE
  v2 := 7
  v2 -= v0 # X
  v3 := 0 # Y
  loop
    :unpack long background1-sprite
    v4 := 8 # height
    v5 := 1 # plane
    display-sprite
    v2 += 8
    if v2 < 64 then
  again

  return

: render-player
  i := player
  load v1
  v2 := v0 # X
  v3 := v1 # Y
  v4 := 7 # height
  v5 := 0 # plane
  :unpack long my-sprite
  display-sprite
  v5 := 1 # plane
  :unpack long my-sprite
  display-sprite
  return

: render-hud
  # Plane 1
  i := long hud-top-sprite
  load vE
  i := long display-buffer-plane1
  save vE
  i := long hud-bottom-sprite
  load vE
  i := long display-buffer-plane1-plus-15
  save vE

  # Plane 2
  i := long hud-top-sprite
  load vE
  i := long display-buffer-plane2
  save vE
  i := long hud-bottom-sprite
  load vE
  i := long display-buffer-plane2-plus-15
  save vE

  return



: player
  10 10 # X, Y
: player-orientation
  0 # orientation

: tick
  0

:monitor player 2
:monitor player-orientation 1
:monitor tick 1

#####################
# Non-blocking key input check
# Updates the player data on input, checks for collisions
# Destroys v0 - v3
: check-keys
  v0 := OCTO_KEY_A
  if v0 key then jump move-left
  v0 := OCTO_KEY_D
  if v0 key then jump move-right
  v0 := OCTO_KEY_W
  if v0 key then jump move-up
  v0 := OCTO_KEY_S
  if v0 key then jump move-down
  return

: move-right
  i := long player
  load v1
  if v0 < 55 then v0 += 1
  jump collide-or-save
: move-left
  i := long player
  load v1
  if v0 > 9 then v0 -= 1
  jump collide-or-save
: move-up
  i := long player
  load v1
  if v1 > 0 then v1 -= 1
  jump collide-or-save
: move-down
  i := long player
  load v1
  if v1 < 23 then v1 += 1
  # Fall through

: collide-or-save
  # TODO: Check for colission
  i := long player
  save v1
  return

# Blocking "press any key" routine
# (does play music though)
# Returns pressed key in v5
: wait-key-press
  vA := 0
: wait-key-press-loop
  #clock-tick
  if vA key then return
  vA += 1
  if vA != 16 then jump wait-key-press-loop
  jump wait-key-press


: display-buffer
: display-buffer-plane1
  # 4 planes of 7.5 times 32 bytes each. 240 bytes per layer, 960 bytes total.
  # The image is layed out in consecutive vertical slices of 8 pixels wide
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
: display-buffer-plane1-plus-15
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

: display-buffer-plane2
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
: display-buffer-plane2-plus-15
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

: display-buffer-plane3
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
: display-buffer-plane3-plus-15
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

: display-buffer-plane4
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
: display-buffer-plane4-plus-15
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

  :monitor display-buffer 960

: background1-sprite
  0b00001000
  0b00100001
  0b00000100
  0b10000000
  0b00010010
  0b01000000
  0b00000100
  0b10010000
: background2-sprite
  0b00010000
  0b00111000
  0b11111100
  0b11111111
  0b11111111
: background3-sprite
  0b11100111
  0b11000011
  0b10000001
  0b00000000
  0b00000000

: my-sprite
  0b11100000
  0b10011000
  0b10000110
  0b10000001
  0b10000110
  0b10011000
  0b11100000

: hud-top-sprite
  0b00000001
  0b01101101
  0b01001101
  0b00101001
  0b01101001
  0b00000001
  0b01101101
  0b00100101
  0b01001001
  0b01001101
  0b00000001
  0b00000001
  0b00000001
  0b01101001
  0b01101101

: hud-bottom-sprite
  0b01001001
  0b01000101
  0b00000001
  0b00101001
  0b00101001
  0b00101101
  0b00100101
  0b00000001
  0b00000001
  0b00000001
  0b00000001
  0b00000001
  0b00000001
  0b00000001
  0b00000001