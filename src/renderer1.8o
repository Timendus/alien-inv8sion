#include "display.8o"

: render-scene
  display-clear
  render-background
  render-enemies
  render-player
  render-hud
  display-copy
  return

: render-background
  i := long tick
  load vE - vE

  vE >>= vE
  v0 := 7
  v0 &= vE
  v2 := 7
  v2 -= v0 # X
  v3 := 19 # Y
  #:breakpoint stop
  loop
    :unpack long background2-sprite
    v4 := 5 # height
    v5 := 3 # plane
    display-sprite
    v2 += 8
    if v2 < 64 then
  again

  vE >>= vE
  v0 := 7
  v0 &= vE
  v2 := 7
  v2 -= v0 # X
  v3 := 14 # Y
  #:breakpoint stop
  loop
    :unpack long background3-sprite
    v4 := 5 # height
    v5 := 3 # plane
    display-sprite
    v2 += 8
    if v2 < 64 then
  again

  vE >>= vE
  v0 := 7
  v0 &= vE
  v2 := 7
  v2 -= v0 # X
  v3 := 9 # Y
  loop
    :unpack long background2-sprite
    v4 := 5 # height
    v5 := 3 # plane
    display-sprite
    v2 += 8
    if v2 < 64 then
  again

  vE >>= vE
  v0 := 7
  v0 &= vE
  v2 := 7
  v2 -= v0 # X
  v3 := 0 # Y
  loop
    :unpack long background1-sprite
    v4 := 8 # height
    v5 := 0 # plane
    display-sprite
    :unpack long background1-sprite
    v5 := 1 # plane
    display-sprite
    :unpack long background1-sprite
    v5 := 2 # plane
    display-sprite
    v2 += 8
    if v2 < 64 then
  again

  return

: render-player
  i := player
  load v2 - v3 # X and Y
  :unpack long player-sprite
  display-complex-sprite

  # Are we shooting?
  i := shooting
  load v0
  if v0 == 0 then return

  # Show lasers
  v2 += 3 # X
  i := tick
  load v0
  v1 := 3
  v0 &= v1
  v2 += v0
  v3 += 1 # Y
  v4 := 1 # height
  v5 := 2 # plane
  loop
    :unpack long laser-sprite
    display-sprite
    v3 += 4
    :unpack long laser-sprite
    display-sprite
    v3 -= 4
    v2 += 6
    if v2 < 60 then
  again
  return

# This subroutine is also responsible for updating the enemy positions and for
# bouncing them at the edges of the screen.
: render-enemies
  vE := 0
  loop
    if vE == 50 then return # Checked all ten enemies

    i := long enemies
    i += vE
    load v0 - v4 # Don't auto-increment i

    if v0 != 0 begin # Is there an enemy in this slot?
      v2 += v1
      v3 += v4
      save v0 - v4 # Don't auto-increment i

      # Interpret X and Y coordinates as fixed point floats
      v2 >>= v2 v2 >>= v2
      v3 >>= v3 v3 >>= v3

      if v2 == 0 begin
        # Disappear on the left (and generate new enemy)
        generate-enemy
      else
        # Bounce top and bottom
        if v3 == 0  then v4 := 1
        if v3 == 25 then v4 := -1
        v5 := 4
        i += v5
        save v4 - v4

        # Select the right sprite
        if v0 == 1 begin :unpack long enemy1-sprite end
        if v0 == 2 begin :unpack long enemy2-sprite end

        # And show that cannon fodder!
        display-complex-sprite
      end
    end
    vE += 5
  again

: render-hud
  # Plane 1
  i := long hud-top-sprite
  load vE
  i := long display-buffer-plane1
  save vE
  i := long hud-bottom-sprite
  load vE
  i := long display-buffer-plane1-plus-15
  save vE

  # Plane 2
  i := long hud-top-sprite
  load vE
  i := long display-buffer-plane2
  save vE
  i := long hud-bottom-sprite
  load vE
  i := long display-buffer-plane2-plus-15
  save vE

  # Plane 2
  i := long hud-top-sprite
  load vE
  i := long display-buffer-plane3
  save vE
  i := long hud-bottom-sprite
  load vE
  i := long display-buffer-plane3-plus-15
  save vE

  # Plane 2
  i := long hud-top-sprite
  load vE
  i := long display-buffer-plane4
  save vE
  i := long hud-bottom-sprite
  load vE
  i := long display-buffer-plane4-plus-15
  save vE

  return

#include "sprites/backgrounds.8o"
#include "sprites/player.8o"
#include "sprites/enemies.8o"
#include "sprites/hud.8o"
