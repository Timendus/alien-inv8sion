# Input: v0 = level number
: render-level-text
  create-empty-space
  render-level-number
  render-ready-string
  render-level-string
  return

: render-game-over-text
  create-empty-space
  render-game-over-string
  return

: create-empty-space
  i := long display-buffer-plane1
  clear-row
  i := long display-buffer-plane2
  clear-row
  i := long display-buffer-plane3
  clear-row
  i := long display-buffer-plane4
  clear-row
  return

: clear-row
  v0 := 0
  v1 := 0
  v2 := 0
  v3 := 0
  v4 := 0
  v5 := 0
  v6 := 0

  v7 := 0
  v8 := 24
  v9 := 9 # Top of black bar
  vA := 6
  i += v9
  loop
    save v0 - v6
    i += vA
    save v0 - v6
    i += v8
    v7 += 1
    if v7 != 8 then
  again
  return

: render-level-number
  i := long level
  load v4 - v4
  i := numbers-bcd
  bcd v4
  load vA - vC
  v4 := vB
  v4 += 17
  load-font
  v2 := 40
  v3 := 10 # Top of line one
  v4 := 5 # Height
  v5 := 2 # Plane
  display-sprite
  v4 := vC
  v4 += 17
  load-font
  v2 := 44
  v3 := 10 # Top of line one
  v4 := 5 # Height
  v5 := 2 # Plane
  display-sprite
  return

: render-level-string
  vB := 0
  v2 := 19
  v3 := 10 # Top of line one
  loop
    if vB == 5 then return
    i := long level-string
    i += vB
    load v4 - v4
    load-font
    load vA - vA
    v4 := 5 # Height
    v5 := 2 # Plane
    display-sprite
    v2 += vA
    vB += 1
  again

: render-ready-string
  vB := 0
  v2 := 11
  v3 := 16 # Top of line two
  loop
    if vB == 10 then return
    i := long get-ready-string
    i += vB
    load v4 - v4
    load-font
    load vA - vA
    v4 := 5 # Height
    v5 := 2 # Plane
    display-sprite
    v2 += vA
    vB += 1
  again

: render-game-over-string
  vB := 0
  v2 := 2
  v3 := 13 # Top of line two
  loop
    if vB == 15 then return
    i := long game-over-string
    i += vB
    load v4 - v4
    load-font
    load vA - vA
    v4 := 5 # Height
    v5 := 2 # Plane
    display-sprite
    v2 += vA
    vB += 1
  again

# Get font address in both i and v0, v1
# Input: v4 = ascii value
: load-font
  i := long font
  :unpack long font
  v4 <<= v4
  v1 += v4
  v0 += vF
  v1 += v4
  v0 += vF
  v1 += v4
  v0 += vF
  v1 += 1
  v0 += vF
  i += v4
  i += v4
  i += v4
  return

:segment data

:stringmode ascii "\0 !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~" {
  :byte { VALUE }
}

: level-string
  ascii "Level"

: get-ready-string
  ascii "GET READY!"

: game-over-string
  ascii "-= GAME OVER =-"

:include "sprites/font.8o"
