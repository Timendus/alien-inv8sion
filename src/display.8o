# Show the contents of the display buffer on the screen
# 24 x 2 + 6 = 53 instructions including call and return
: display-copy-values
  0 1 8 16 24 32 40 48 56 15
: display-copy
  i := display-copy-values
  load v9
  i := display-buffer
  clear
  sprite v0 v1 15   i += v9
  sprite v0 v3 15   i += v9
  sprite v2 v1 15   i += v9
  sprite v2 v3 15   i += v9
  sprite v3 v1 15   i += v9
  sprite v3 v3 15   i += v9
  sprite v4 v1 15   i += v9
  sprite v4 v3 15   i += v9
  sprite v5 v1 15   i += v9
  sprite v5 v3 15   i += v9
  sprite v6 v1 15   i += v9
  sprite v6 v3 15   i += v9
  sprite v7 v1 15   i += v9
  sprite v7 v3 15   i += v9
  sprite v8 v1 15   i += v9
  sprite v8 v3 15
  return

# Display buffer contains 8 * 15 * 2 bytes = 240 bytes per layer
# 240 / 15 = 16. So either load 16 values 15 times or the other way around
# 20 instructions including call and return (non-SCHIP version)
: display-clear-values
  0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0
: display-clear
  #if SCHIP
    i := display-clear-values
    load vE
    vF := 15
    i := display-buffer
    save vE  i += vF  save vE  i += vF  save vE  i += vF  save vE  i += vF
    save vE  i += vF  save vE  i += vF  save vE  i += vF  save vE  i += vF
    save vE  i += vF  save vE  i += vF  save vE  i += vF  save vE  i += vF
    save vE  i += vF  save vE  i += vF  save vE  i += vF  save vE
  #else
    i := display-clear-values
    load vF
    i := display-buffer
    save vF  save vF  save vF  save vF
    save vF  save vF  save vF  save vF
    save vF  save vF  save vF  save vF
    save vF  save vF  save vF
  #end
  return

# Render a sprite to the display buffer
# v0, v1 = sprite address
# v2 = X coordinate
# v3 = Y coordinate
# v4 = height (in pixels)
# Preserves X and Y
# Destroys v0, v1, v4 - v7 and i

# Overhead: 5 instructions
# Per row: ~38 instructions
# Per shift: 7 instructions
# So for 8x8 sprite at bad alignment: 5 + 8 * (38 + 7*7) = 701 instructions
# For 8x8 sprite at good alignment: 5 + 8 * (38 + 2) = 325 instructions
: display-sprite
  :alias X v2
  :alias Y v3
  :alias height v4
  :alias row v5
  :alias leftPart v6
  :alias rightPart v7
  :alias offset v1
  :alias temp1 v8
  :alias temp2 v9

  row := 0
  i := display-sprite-address
  save v1

  # Normalize coordinates
  v0 := 31
  v3 &= v0
  v0 := 63
  v2 &= v0

  loop
    if row == height then return # Done
    v0 := Y
    v0 += row
    if v0 == 30 then return # Overflowing bottom of screen, so done

    # Get the sprite data to put on the display buffer
    0xF0 0x00 # i := long ....
  : display-sprite-address
    0x00 0x00
    i += row
    load v0

    offset := 0b00000111
    offset &= X
    rightPart := 0
    leftPart := v0

    # Do some shifting magic for unaligned sprites
    loop
      while offset != 0
      rightPart >>= rightPart
      leftPart >>= leftPart
      if vF != 0 then rightPart += 128
      offset -= 1
    again

    # Calculate place in buffer
    offset := X
    offset >>= offset
    offset >>= offset
    offset >>= offset
    i := long display-buffer
    v0 := 30 # rows
    loop
      while offset != 0
      i += v0
      offset -= 1
    again
    i += Y
    i += row

    # Write the new data to the buffer
    load v0 - v0 # Don't auto-increment i
    v0 |= leftPart
    save v0 - v0
    if X < 56 begin
      vF := 30
      i += vF
      load v0 - v0
      v0 |= rightPart
      save v0 - v0
    end

    row += 1
  again

#data

: display-buffer
  # 4 times 8 lines of 32 bytes each = 1024 bytes
  # The image is layed out in consecutive vertical slices of 8 pixels wide
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
